<div class="month_select">
    <select id="month_search">
        <option value="1">1月</option>
        <option value="2">2月</option>
        <option value="3">3月</option>
        <option value="4">4月</option>
        <option value="5">5月</option>
        <option value="6">6月</option>
        <option value="7">7月</option>
        <option value="8">8月</option>
        <option value="9">9月</option>
        <option value="10">10月</option>
        <option value="11">11月</option>
        <option value="12">12月</option>
    </select>
    <input type="submit" id="month_submit">
    <div class="time_total">
        合計<%= @hour_total %>時間
        <%= @min_total %>分
        <%= @sec_total %>秒勉強しています
    </div>
</div>


<div class="graph">
<canvas id="chartBox"></canvas>
</div>



<%# Timer.where(created_at: '2019-09-21'..Time.zone.now) %>
<%# その日から現在までの %>
<%#
1日の時間each
hour min sec

終わったら次の日の計算を行う

end %>
<script>

$(document).on("click", "#month_submit", function(){

    delete set_graph;

    var month_num = $("#month_search").val();
    const year = 2019;

//new Dateは０番＝1月なので、入力した値＋１月の値が入る、だから−１してる
    var zmonth = (Number(month_num)-1);
    var sdt = new Date(year, zmonth);

//new Dateは０番＝1月なので、入力した値＋１月の値が入る、だから−１してる

    var month = (Number(month_num));
    var dt = new Date(year, month, 0);
    $.ajax({
        url:"http://localhost:3000/timers",
        type: "GET",
        datatype:"json",
        data:{sdt, dt}
    })
    .done(function(data){
        $(document).ready(function() {
            new Chart(document.getElementById("chartBox"), {
            type: 'bar',
            data: {
                datasets: [{
                    //９月１日から１０月１日まででこの日を省く
                    // データを入れる用の空の配列
                    // 時間が入ると配列の中に値が入るようにする→なにもない日は配列に０が入るようにする
                    // Timer.where(created_at: Time.now.at_beginning_of_month..Time.now.at_end_of_month)
                    // c = "2019-08-14"
                    // Timer.where(created_at: Time.c.at_beginning_of_month..Time.c.at_end_of_month)

                    // これでその現在の月から終わりまでの時間を取得できる

                    // aa = "2019-09-01"
                    // all = current_user.timers.where(created_at: aa.in_time_zone.all_month)
                    // all.sum(:total)
                    // total = (all.group(:created_at).sum(:total)).to_a
                    // sum_total[0][1]とすると０番目のkeyがとれる

                    // ７８〜８２行で該当する月のデータを日にち文取れているので、whenever等でレコードを作れば空の日はなくなる
                    // 配列を作るとき元々０が入るように設定

                    // created_at.mdayで保存した日だけ取得可能
                    // array = Array.new(30)
                    // post = Post.find(44)
                    // day = post.created_at.mday（１８日が入る）
                    // array[day-1] = post.id（４４番）
                    // とすると１８番目に４４が入った
                    // 元々値が入ってる場合もあるので合計する


                    //Timer.where(created_at: "2019-09-03")
                    // ↑をsum:totalする
                    data: [12.33342,19,3,5,2,3,23,15,0,0,0,1,1,1,1,1,1,1,1,1,1,1,4,3,5,3,5,4,4,2,3],
                    label: "",
                    borderWidth: 2,
                    borderColor: "#3e95cd",
                    fill: false,
                    pointRadius: 0
                }]
            },
            options: {
                scales: {
                    xAxes: [{
                    type: 'time',
                    time: {
                        parser: 'YYYY-MM-DD',
                        unit: "day",
                        displayFormats: {
                        day: 'M月D日'
                        },
                        min: sdt,
                        max: dt
                    },
                    ticks: {
                        source: 'data'
                    }
                    }]
                },
                legend: {
                    display: false
                },
                animation: {
                    duration: 0,
                },
                hover: {
                    animationDuration: 0,
                },
                responsiveAnimationDuration: 0
            },
            plugins: [{
                beforeInit: function(chart) {
                    var time = chart.options.scales.xAxes[0].time, // 'time' object reference
                    timeDiff = moment(time.max).diff(moment(time.min), 'd'); // difference (in days) between min and max date
                    // populate 'labels' array
                    // (create a date string for each date between min and max, inclusive)
                    for (i = 0; i <= timeDiff; i++) {
                        var _label = moment(time.min).add(i, 'd').format('YYYY-MM-DD HH:mm:ss');
                        chart.data.labels.push(_label);
                    }
                }
            }]
            });

        });
    })
    .fail(function(){
        alert("送信に失敗しました")
    })
});

// const set_graph = $(function(){
//     var month_num = $("#month_search").val();
//     const year = 2019;
//     var sdt = new Date(year, 8);

//     var month = 9;
//     var dt = new Date(year, month, 0);
//         $(document).ready(function() {
//             new Chart(document.getElementById("chartBox"), {
//             type: 'bar',
//             data: {
//                 datasets: [{
//                     data: [12, 19, 3, 5, 2, 3, 23, 15,0,0,0,1,1,1,1,1,1,1,1,1,1,1,4,3,5,3,5,4,4,2],
//                     label: "",
//                     borderWidth: 2,
//                     borderColor: "#3e95cd",
//                     fill: false,
//                     pointRadius: 0
//                 }]
//             },
//             options: {
//                 scales: {
//                     xAxes: [{
//                     type: 'time',
//                     time: {
//                         parser: 'YYYY-MM-DD',
//                         unit: 'day',
//                         displayFormats: {
//                         day: 'MMM D'
//                         },
//                         min: sdt,
//                         max: dt
//                     },
//                     ticks: {
//                         source: 'data'
//                     }
//                     }]
//                 },
//                 legend: {
//                     display: false
//                 },
//                 animation: {
//                     duration: 0,
//                 },
//                 hover: {
//                     animationDuration: 0,
//                 },
//                 responsiveAnimationDuration: 0
//             },
//             plugins: [{
//                 beforeInit: function(chart) {
//                     var time = chart.options.scales.xAxes[0].time, // 'time' object reference
//                     timeDiff = moment(time.max).diff(moment(time.min), 'd'); // difference (in days) between min and max date
//                     // populate 'labels' array
//                     // (create a date string for each date between min and max, inclusive)
//                     for (i = 0; i <= timeDiff; i++) {
//                         var _label = moment(time.min).add(i, 'd').format('YYYY-MM-DD HH:mm:ss');
//                         chart.data.labels.push(_label);
//                     }
//                 }
//             }]
//         });
//     });
// })

</script>


<style >
.month_select{
    margin:20px;
    text-align:center;
}
.graph{
    width:700px;
    height:600px;
    margin:50px auto;
}
.time-total{
    display:inline-block;
    margin:0 auto;
}
</style>